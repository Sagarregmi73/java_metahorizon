package com.metahoizonemployeemanagement.core.service.impl;



import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;

import org.apache.poi.ss.usermodel.*;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.metahoizonemployeemanagement.core.exception.ResourceNotFoundException;
import com.metahoizonemployeemanagement.core.model.Employee;
import com.metahoizonemployeemanagement.core.repository.EmployeeRepository;
import com.metahoizonemployeemanagement.core.service.EmployeeService;


@Service
public class EmployeeServiceImpl implements EmployeeService {

@Autowired
	private EmployeeRepository empRepo;

@Override
public void addEmployee(Employee employee) {
	// TODO Auto-generated method stub
	empRepo.save(employee);
	
}


@Override
public void deleteEmployee(int id) {
	// TODO Auto-generated method stub
	empRepo.findById(id).orElseThrow(()->new ResourceNotFoundException("Employee", "Id", id));
	empRepo.deleteById(id);
}



@Override
public Employee getEmployeeById(int id) {

	//Optional<Employee> employee=empRepo.findById(id).get();
	//	if(employee.isPresent()) {
//return employee.get();
//}
//else {
//throw new ResourceNotFoundException("Employee", "Id", id);
//}
	return empRepo.findById(id).orElseThrow(()->new ResourceNotFoundException("Employee", "Id", id));
	
}

@Override
public List<Employee> getAllEmployees() {
	
	return empRepo.findAll();
}

public void exportDataToExcel() {
    try {
        Iterable<Employee> data = empRepo.findAll();

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Employee Data");

        // Create header row
        Row headerRow = sheet.createRow(0);

        // Check if data is not empty
        if (data.iterator().hasNext()) {
            ResultSetMetaData metaData = getResultSetMetaData(data.iterator().next());
            int columnCount = metaData.getColumnCount();

            for (int i = 1; i <= columnCount; i++) {
                Cell cell = headerRow.createCell(i - 1);
                cell.setCellValue(metaData.getColumnName(i));
            }

            // Fill data rows
            int rowNum = 1;
            for (Employee employee : data) {
                Row row = sheet.createRow(rowNum++);
                for (int i = 1; i <= columnCount; i++) {
                    Cell cell = row.createCell(i - 1);
                    // Replace "getYourField()" with the actual getter method for your fields
                    cell.setCellValue(employee.getId());
                    cell.setCellValue(employee.getFirstName());
                    cell.setCellValue(employee.getLastName());
                    cell.setCellValue(employee.getEmail());
                    cell.setCellValue(employee.getFatherName());
                    cell.setCellValue(employee.getPhone());
                    cell.setCellValue(employee.getGender());
                    cell.setCellValue(employee.getDob());
                    cell.setCellValue(employee.getCountry());
                    cell.setCellValue(employee.getCity());
                    cell.setCellValue(employee.getState());
                    cell.setCellValue(employee.getZipCode());
                    
                }
            }
        }

        // Write to Excel file
        try (FileOutputStream fileOut = new FileOutputStream("employee_data.xlsx")) {
            workbook.write(fileOut);
        }

        System.out.println("Data exported successfully to employee_data.xlsx");

    } catch (IOException | SQLException e) {
        e.printStackTrace();
    }
}

private ResultSetMetaData getResultSetMetaData(Employee employee) throws SQLException {
    // Implement this method based on your actual data source
    // Return the ResultSetMetaData for the given entity (e.g., Employee)
    // You might need to use reflection or other methods to obtain metadata.

    // Example (replace with your actual implementation):
    // Connection connection = ...;
    // Statement statement = connection.createStatement();
    // ResultSet resultSet = statement.executeQuery("SELECT * FROM your_table");
    // return resultSet.getMetaData();

    // For simplicity, returning null for now; replace this with the actual implementation
    return null;
}
@Override
public Employee updateEmployee(Employee employee, int id) {

	Employee existingEmployee=empRepo.findById(id).orElseThrow(()->new ResourceNotFoundException("Employee", "Id", id));
	existingEmployee.setFirstName(employee.getFirstName());
	existingEmployee.setLastName(employee.getLastName());
	existingEmployee.setEmail(employee.getEmail());
	existingEmployee.setFatherName(employee.getFatherName());
	existingEmployee.setPhone(employee.getPhone());
	existingEmployee.setGender(employee.getGender());
	existingEmployee.setDob(employee.getDob());
	existingEmployee.setCountry(employee.getCountry());
	existingEmployee.setCity(employee.getCity());
	existingEmployee.setState(employee.getState());
	existingEmployee.setZipCode(employee.getZipCode());
	empRepo.save(existingEmployee);
	return existingEmployee;
}
	
	

}
